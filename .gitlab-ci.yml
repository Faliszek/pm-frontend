stages:
  - build
  - deploy

.prepare:
  cache:
    key: "$CI_BUILD_REF_NAME node:11"
    paths:
      - node_modules/
  image: node:11
  variables:
    BS_LOG: "error"
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
    - yarn install

build:development:
  stage: build
  extends: .prepare
  only:
    - master
  except:
    - tags
  script:
    - yarn build
  artifacts:
    paths:
      - build
      - package.json

.prepare-deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:18.09-dind
  variables:
    DOCKER_DRIVER: "overlay"
  except:
    - tags
  before_script:
    - apk add --update bash git openssh openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
    - docker version
    - docker info
    - git config --global user.email "gitlab@codeheroes.io"
    - git config --global user.name "GitlabCI"
    - echo "$DOCKER_PASSWORD" | docker login docker.codeheroes.io -u "$DOCKER_USERNAME" --password-stdin

deploy:development:
  extends: .prepare-deploy
  only:
    - master
  dependencies:
    - build:development
  script:
    - export CURRENT_VERSION=`sed -n 's/.*\"version\"\:.\"\([0-9\.]*\)\",/\1/p' package.json`
    - export VERSION_STRIPPED=${CURRENT_VERSION#*.0.}
    - export NEXT_VERSION=$((VERSION_STRIPPED+1))
    - export VERSION="0.${NEXT_VERSION}"
    - sed -i '/version/s/[^.]*$/'"${NEXT_VERSION}\",/" package.json
    - echo "Version updated to ${VERSION}"

    # development
    - mv build docker/dist

    - cd ./docker
    - echo "Building development image..."
    - docker build --no-cache --tag="docker.codeheroes.io/${CI_PROJECT_NAME}:${VERSION}" .
    - echo "Pushing development image..."
    - docker push "docker.codeheroes.io/${CI_PROJECT_NAME}:${VERSION}"
    - cd ../

    - echo "Cleanup..."
    - rm -rf docker/dist

    # Push tag and cleanup
    - export URL_HOST=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${CI_ACCESS_TOKEN}@${URL_HOST}"
    - git commit -am "Version ${VERSION} [skip ci]"
    - git tag "v${VERSION}"
    - git push origin HEAD:master
    - git push origin "v${VERSION}"
    - docker logout docker.codeheroes.io